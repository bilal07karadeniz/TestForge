import { motion } from 'framer-motion';
import { Download, RefreshCw, ExternalLink } from 'lucide-react';
import ScoreCircle from './ScoreCircle';
import TestResults from './TestResults';
import SecurityFindings from './SecurityFindings';
import GasMetrics from './GasMetrics';
import GasOptimizationTips from './GasOptimizationTips';
import FunctionCoverage from './FunctionCoverage';
import ExplorerLink from './ExplorerLink';

export default function ResultsDashboard({ results, onReset }) {
  const {
    score = 0,
    deployment = {},
    testResults = {},
    findings = {},
    gasMetrics = {},
    mocks = {},
    aiReport = ''
  } = results || {};

  // Debug logging
  console.log('ResultsDashboard - Full results:', results);
  console.log('ResultsDashboard - testResults:', testResults);
  console.log('ResultsDashboard - gasMetrics:', gasMetrics);

  const handleDownloadReport = () => {
    const report = `
TestForge Security Analysis Report
=====================================

Contract: ${deployment?.contractName || 'N/A'}
Address: ${deployment?.address || 'N/A'}
Network: Monad Testnet
Deployed at: ${deployment?.timestamp ? new Date(deployment.timestamp).toLocaleString() : 'N/A'}

Overall Score: ${score || 0}/100

Test Results
-------------
Total Tests: ${testResults?.total || 0}
Passed: ${testResults?.passed || 0}
Failed: ${testResults?.failed || 0}

Security Findings
-----------------
Critical Issues: ${findings?.critical?.length || 0}
Warnings: ${findings?.warnings?.length || 0}

Gas Metrics
-----------
Total Gas Used: ${gasMetrics?.totalGas?.toLocaleString() || 'N/A'}
Average Gas: ${gasMetrics?.averageGas ? Math.round(gasMetrics.averageGas).toLocaleString() : 0}
Optimization Score: ${gasMetrics?.optimizationScore || 0}/100

AI Analysis
-----------
${aiReport || 'No analysis available'}

Mock Contracts
--------------
${mocks && Object.keys(mocks).length > 0 ? Object.entries(mocks).map(([key, value]) => `${key}: ${value?.address || 'N/A'}`).join('\n') : 'No mock contracts deployed'}

Generated by TestForge - Monad AI Smart Contract Tester
Report Time: ${new Date().toLocaleString('tr-TR')}
    `.trim();

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `testforge-report-${deployment.contractName}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="w-full max-w-6xl mx-auto space-y-8 pb-12"
    >
      {/* Header */}
      <div className="glass rounded-2xl p-8">
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold gradient-text mb-2">Analysis Complete</h2>
            <p className="text-gray-400">
              Contract deployed and tested on Monad Testnet
            </p>
          </div>
          <div className="flex gap-3">
            <motion.button
              onClick={handleDownloadReport}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center gap-2 bg-card hover:bg-card/80 text-white px-4 py-2 rounded-lg transition-colors"
            >
              <Download size={20} />
              <span className="hidden sm:inline">Download Report</span>
            </motion.button>
            <motion.button
              onClick={onReset}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center gap-2 bg-gradient-primary text-white px-4 py-2 rounded-lg"
            >
              <RefreshCw size={20} />
              <span className="hidden sm:inline">New Analysis</span>
            </motion.button>
          </div>
        </div>

        {/* Score and Deployment Info */}
        <div className="grid md:grid-cols-2 gap-8">
          {/* Score Circle */}
          <div className="flex items-center justify-center">
            <ScoreCircle score={score} />
          </div>

          {/* Deployment Info */}
          <div className="space-y-4">
            <h3 className="text-xl font-bold mb-4">Deployment Information</h3>

            <div className="space-y-3">
              <div className="bg-card/50 rounded-lg p-4">
                <div className="text-sm text-gray-400 mb-1">Contract Name</div>
                <div className="text-white font-medium">{deployment?.contractName || 'N/A'}</div>
              </div>

              <div className="bg-card/50 rounded-lg p-4">
                <div className="text-sm text-gray-400 mb-1">Contract Address</div>
                <div className="font-mono text-sm">
                  {deployment?.address ? (
                    <ExplorerLink type="address" hash={deployment.address}>
                      {deployment.address.slice(0, 10)}...{deployment.address.slice(-8)}
                    </ExplorerLink>
                  ) : 'N/A'}
                </div>
              </div>

              {deployment?.transactionHash && (
                <div className="bg-card/50 rounded-lg p-4">
                  <div className="text-sm text-gray-400 mb-1">Deploy Transaction</div>
                  <div className="font-mono text-sm">
                    <ExplorerLink type="tx" hash={deployment.transactionHash}>
                      {deployment.transactionHash.slice(0, 10)}...{deployment.transactionHash.slice(-8)}
                    </ExplorerLink>
                  </div>
                </div>
              )}

              {mocks && Object.keys(mocks).length > 0 && (
                <div className="bg-card/50 rounded-lg p-4">
                  <div className="text-sm text-gray-400 mb-2">Mock Contracts</div>
                  <div className="space-y-2">
                    {Object.entries(mocks).map(([name, mock]) => (
                      <div key={name} className="flex items-center justify-between">
                        <span className="text-white text-sm">{mock?.name || name}</span>
                        <div className="font-mono text-xs">
                          {mock?.address ? (
                            <ExplorerLink type="address" hash={mock.address}>
                              {mock.address.slice(0, 6)}...{mock.address.slice(-4)}
                            </ExplorerLink>
                          ) : 'N/A'}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Function Coverage */}
      <FunctionCoverage testResults={testResults} />

      {/* Test Results - Full Width */}
      <TestResults results={testResults} />

      {/* Results Grid */}
      <div className="grid lg:grid-cols-2 gap-6">
        {/* Gas Metrics */}
        <GasMetrics gasData={gasMetrics} />

        {/* Security Findings */}
        <SecurityFindings findings={findings} />
      </div>

      {/* Gas Optimization Tips */}
      <GasOptimizationTips gasData={gasMetrics} findings={findings} />

      {/* AI Report */}
      {aiReport && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="glass rounded-xl p-6"
        >
          <h3 className="text-xl font-bold mb-4">AI Security Analysis</h3>
          <div className="prose prose-invert max-w-none">
            <pre className="text-sm text-gray-300 whitespace-pre-wrap bg-card/50 rounded-lg p-4">
              {aiReport}
            </pre>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
}
